import * as vscode from "vscode";

import { Locator, LocatorRunner } from "../ArtifactLocator";
import { ConfigSetting } from "../ConfigSetting";

// export type OneCfg = {
//   "one-import-tflite": CfgOneImportTflite;
//   "one-import-onnx": CfgOneImportOnnx;
//   "one-import-tf": CfgOneImportTf;
// };
// type CfgOneImportTflite = any;
// type CfgOneImportOnnx = any;
// type CfgOneImportTf = any;

export class EdgeTpuConfigSetting extends ConfigSetting {
  protected _initBaseModelsLocatorRunner() {
    let locatorRunner = new LocatorRunner();

    locatorRunner.register({
      artifactAttr: {
        ext: ".tflite",
        icon: new vscode.ThemeIcon("symbol-variable"),
      },
      locator: new Locator((value: string) => {
        value += "";
        const filterd = value
          .split(" ")
          .filter((val) => !val.endsWith("_edgetpu.tflite"));
        value = filterd.join(" ");
        return LocatorRunner.searchWithExt(".tflite", value);
      }),
    });

    this.baseModelsLocatorRunner = locatorRunner;
  }

  protected _initProductsLocatorRunner() {
    let locatorRunner = new LocatorRunner();

    /**
     * ABOUT ORDERING
     *
     * The registration order determines the order in the tree view
     */

    // NOTE
    // Shows <model>_edgetpu.tflite
    // <model>_edgetpu.tflite generated by <model>.tflite is product type
    locatorRunner.register({
      artifactAttr: {
        ext: ".tflite",
        icon: new vscode.ThemeIcon("symbol-variable"),
      },
      locator: new Locator((value: string) => {
        value += "";
        const filterd = value
          .split(" ")
          .filter((val) => val.endsWith("_edgetpu.tflite"));
        value = filterd.join(" ");
        return LocatorRunner.searchWithExt(".tflite", value);
      }),
    });

    locatorRunner.register({
      // 'default' view type is 'text editor' (vscode.openWith)
      artifactAttr: {
        ext: ".log",
        openViewType: "default",
        icon: vscode.ThemeIcon.File,
        canHide: true,
      },
      locator: new Locator((value: string) => {
        value += "";
        const filterd = value
          .split(" ")
          .filter((val) => val.endsWith("_edgetpu.tflite"));
        value = filterd.join(" ");
        return LocatorRunner.searchWithExt(".tflite", value).map((filepath) =>
          filepath.replace(".tflite", ".log")
        );
      }),
    });

    this.productsLocatorRunner = locatorRunner;
  }
}
